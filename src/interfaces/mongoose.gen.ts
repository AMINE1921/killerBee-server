/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of BlacklistDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BlacklistDocument.toObject()`. To avoid conflicts with model names, use the type alias `BlacklistObject`.
 * ```
 * const blacklistObject = blacklist.toObject();
 * ```
 */
export type Blacklist = {
  jwt: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of BlacklistDocument (type alias of `Blacklist`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Blacklist } from "../models"
 * import { BlacklistObject } from "../interfaces/mongoose.gen.ts"
 *
 * const blacklistObject: BlacklistObject = blacklist.toObject();
 * ```
 */
export type BlacklistObject = Blacklist;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type BlacklistQuery = mongoose.Query<
  any,
  BlacklistDocument,
  BlacklistQueries
> &
  BlacklistQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `BlacklistSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type BlacklistQueries = {};

export type BlacklistMethods = {};

export type BlacklistStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Blacklist = mongoose.model<BlacklistDocument, BlacklistModel>("Blacklist", BlacklistSchema);
 * ```
 */
export type BlacklistModel = mongoose.Model<
  BlacklistDocument,
  BlacklistQueries
> &
  BlacklistStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Blacklist schema instances:
 * ```
 * const BlacklistSchema: BlacklistSchema = new mongoose.Schema({ ... })
 * ```
 */
export type BlacklistSchema = mongoose.Schema<
  BlacklistDocument,
  BlacklistModel,
  BlacklistMethods,
  BlacklistQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Blacklist = mongoose.model<BlacklistDocument, BlacklistModel>("Blacklist", BlacklistSchema);
 * ```
 */
export type BlacklistDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  BlacklistQueries
> &
  BlacklistMethods & {
    jwt: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of MenuProductDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MenuDocument.toObject()`.
 * ```
 * const menuObject = menu.toObject();
 * ```
 */
export type MenuProduct = {
  name: string;
  productId: (Product["_id"] | Product)[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of MenuDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MenuDocument.toObject()`. To avoid conflicts with model names, use the type alias `MenuObject`.
 * ```
 * const menuObject = menu.toObject();
 * ```
 */
export type Menu = {
  restaurantId: Restaurant["_id"] | Restaurant;
  name: string;
  description: string;
  type: string;
  price: number;
  picture: string;
  products: MenuProduct[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of MenuDocument (type alias of `Menu`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Menu } from "../models"
 * import { MenuObject } from "../interfaces/mongoose.gen.ts"
 *
 * const menuObject: MenuObject = menu.toObject();
 * ```
 */
export type MenuObject = Menu;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type MenuQuery = mongoose.Query<any, MenuDocument, MenuQueries> &
  MenuQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `MenuSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type MenuQueries = {};

export type MenuMethods = {};

export type MenuStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Menu = mongoose.model<MenuDocument, MenuModel>("Menu", MenuSchema);
 * ```
 */
export type MenuModel = mongoose.Model<MenuDocument, MenuQueries> & MenuStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Menu schema instances:
 * ```
 * const MenuSchema: MenuSchema = new mongoose.Schema({ ... })
 * ```
 */
export type MenuSchema = mongoose.Schema<
  MenuDocument,
  MenuModel,
  MenuMethods,
  MenuQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `MenuDocument["products"]` element.
 */
export type MenuProductDocument = mongoose.Types.Subdocument & {
  name: string;
  productId: mongoose.Types.Array<ProductDocument["_id"] | ProductDocument>;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Menu = mongoose.model<MenuDocument, MenuModel>("Menu", MenuSchema);
 * ```
 */
export type MenuDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  MenuQueries
> &
  MenuMethods & {
    restaurantId: RestaurantDocument["_id"] | RestaurantDocument;
    name: string;
    description: string;
    type: string;
    price: number;
    picture: string;
    products: mongoose.Types.DocumentArray<MenuProductDocument>;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of OrderMealMenuProductExtraDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `OrderMealMenuProductDocument.toObject()`.
 * ```
 * const ordermealmenuproductObject = ordermealmenuproduct.toObject();
 * ```
 */
export type OrderMealMenuProductExtra = {
  name: string;
  price: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of OrderMealMenuProductDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `OrderMealMenuDocument.toObject()`.
 * ```
 * const ordermealmenuObject = ordermealmenu.toObject();
 * ```
 */
export type OrderMealMenuProduct = {
  name: string;
  extra: OrderMealMenuProductExtra[];
  except: string[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of OrderMealMenuDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `OrderDocument.toObject()`.
 * ```
 * const orderObject = order.toObject();
 * ```
 */
export type OrderMealMenu = {
  name: string;
  number: number;
  price: number;
  products: OrderMealMenuProduct[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of OrderMealItemExtraDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `OrderMealItemDocument.toObject()`.
 * ```
 * const ordermealitemObject = ordermealitem.toObject();
 * ```
 */
export type OrderMealItemExtra = {
  name: string;
  price: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of OrderMealItemDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `OrderDocument.toObject()`.
 * ```
 * const orderObject = order.toObject();
 * ```
 */
export type OrderMealItem = {
  name: string;
  number: number;
  extra: OrderMealItemExtra[];
  except: string[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of OrderDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `OrderDocument.toObject()`. To avoid conflicts with model names, use the type alias `OrderObject`.
 * ```
 * const orderObject = order.toObject();
 * ```
 */
export type Order = {
  createdAt: Date;
  orderedAt: Date;
  status:
    | "pendingPaiement"
    | "preparation"
    | "arrived"
    | "delivered";
  meal: {
    menu: OrderMealMenu[];
    item: OrderMealItem[];
    promoCode: string;
    promoPourcent: number;
  };
  client: {
    firstname: string;
    lastname: string;
    mail: string;
    phone: string;
    address: {
      street: string;
      city: string;
      zipcode: string;
      country: string;
    };
  };
  restaurant: {
    name: string;
    mail: string;
    phone: string;
    address: {
      street: string;
      city: string;
      zipcode: string;
      country: string;
      lat: number;
      lng: number;
    };
  };
  deliverer: {
    firstname: string;
    lastname: string;
    mail: string;
    phone: string;
    lat: number;
    lng: number;
  };
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of OrderDocument (type alias of `Order`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Order } from "../models"
 * import { OrderObject } from "../interfaces/mongoose.gen.ts"
 *
 * const orderObject: OrderObject = order.toObject();
 * ```
 */
export type OrderObject = Order;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type OrderQuery = mongoose.Query<any, OrderDocument, OrderQueries> &
  OrderQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `OrderSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type OrderQueries = {};

export type OrderMethods = {};

export type OrderStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Order = mongoose.model<OrderDocument, OrderModel>("Order", OrderSchema);
 * ```
 */
export type OrderModel = mongoose.Model<OrderDocument, OrderQueries> &
  OrderStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Order schema instances:
 * ```
 * const OrderSchema: OrderSchema = new mongoose.Schema({ ... })
 * ```
 */
export type OrderSchema = mongoose.Schema<
  OrderDocument,
  OrderModel,
  OrderMethods,
  OrderQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `OrderMealMenuProductDocument["extra"]` element.
 */
export type OrderMealMenuProductExtraDocument = mongoose.Types.Subdocument & {
  name: string;
  price: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `OrderMealMenuDocument["products"]` element.
 */
export type OrderMealMenuProductDocument = mongoose.Types.Subdocument & {
  name: string;
  extra: mongoose.Types.DocumentArray<OrderMealMenuProductExtraDocument>;
  except: mongoose.Types.Array<string>;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `OrderDocument["meal.menu"]` element.
 */
export type OrderMealMenuDocument = mongoose.Types.Subdocument & {
  name: string;
  number: number;
  price: number;
  products: mongoose.Types.DocumentArray<OrderMealMenuProductDocument>;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `OrderMealItemDocument["extra"]` element.
 */
export type OrderMealItemExtraDocument = mongoose.Types.Subdocument & {
  name: string;
  price: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Subdocument type
 *
 * Type of `OrderDocument["meal.item"]` element.
 */
export type OrderMealItemDocument = mongoose.Types.Subdocument & {
  name: string;
  number: number;
  extra: mongoose.Types.DocumentArray<OrderMealItemExtraDocument>;
  except: mongoose.Types.Array<string>;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Order = mongoose.model<OrderDocument, OrderModel>("Order", OrderSchema);
 * ```
 */
export type OrderDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  OrderQueries
> &
  OrderMethods & {
    createdAt: Date;
    orderedAt: Date;
    status:
      | "pendingPaiement"
      | "preparation"
      | "arrived"
      | "delivered";
    meal: {
      menu: mongoose.Types.DocumentArray<OrderMealMenuDocument>;
      item: mongoose.Types.DocumentArray<OrderMealItemDocument>;
      promoCode: string;
      promoPourcent: number;
    };
    client: {
      firstname: string;
      lastname: string;
      mail: string;
      phone: string;
      address: {
        street: string;
        city: string;
        zipcode: string;
        country: string;
      };
    };
    restaurant: {
      name: string;
      mail: string;
      phone: string;
      address: {
        street: string;
        city: string;
        zipcode: string;
        country: string;
        lat: number;
        lng: number;
      };
    };
    deliverer: {
      firstname: string;
      lastname: string;
      mail: string;
      phone: string;
      lat: number;
      lng: number;
    };
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of ProductCondimentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProductDocument.toObject()`.
 * ```
 * const productObject = product.toObject();
 * ```
 */
export type ProductCondiment = {
  name: string;
  canExcept: boolean;
  extraPrice: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ProductDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProductDocument.toObject()`. To avoid conflicts with model names, use the type alias `ProductObject`.
 * ```
 * const productObject = product.toObject();
 * ```
 */
export type Product = {
  restaurantId: Restaurant["_id"] | Restaurant;
  name: string;
  description: string;
  unit: boolean;
  type: string;
  price?: number;
  picture: string;
  condiments: ProductCondiment[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ProductDocument (type alias of `Product`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Product } from "../models"
 * import { ProductObject } from "../interfaces/mongoose.gen.ts"
 *
 * const productObject: ProductObject = product.toObject();
 * ```
 */
export type ProductObject = Product;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ProductQuery = mongoose.Query<
  any,
  ProductDocument,
  ProductQueries
> &
  ProductQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `ProductSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ProductQueries = {};

export type ProductMethods = {};

export type ProductStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Product = mongoose.model<ProductDocument, ProductModel>("Product", ProductSchema);
 * ```
 */
export type ProductModel = mongoose.Model<ProductDocument, ProductQueries> &
  ProductStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Product schema instances:
 * ```
 * const ProductSchema: ProductSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ProductSchema = mongoose.Schema<
  ProductDocument,
  ProductModel,
  ProductMethods,
  ProductQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `ProductDocument["condiments"]` element.
 */
export type ProductCondimentDocument = mongoose.Types.Subdocument & {
  name: string;
  canExcept: boolean;
  extraPrice: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Product = mongoose.model<ProductDocument, ProductModel>("Product", ProductSchema);
 * ```
 */
export type ProductDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  ProductQueries
> &
  ProductMethods & {
    restaurantId: RestaurantDocument["_id"] | RestaurantDocument;
    name: string;
    description: string;
    unit: boolean;
    type: string;
    price?: number;
    picture: string;
    condiments: mongoose.Types.DocumentArray<ProductCondimentDocument>;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of PromoCodeDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PromoCodeDocument.toObject()`. To avoid conflicts with model names, use the type alias `PromoCodeObject`.
 * ```
 * const promocodeObject = promocode.toObject();
 * ```
 */
export type PromoCode = {
  name: string;
  description: string;
  percent: number;
  condition: {
    minPrice: number;
    firstOrder?: boolean;
    userId?: string;
  };
  startedAt: Date;
  endedAt: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of PromoCodeDocument (type alias of `PromoCode`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { PromoCode } from "../models"
 * import { PromoCodeObject } from "../interfaces/mongoose.gen.ts"
 *
 * const promocodeObject: PromoCodeObject = promocode.toObject();
 * ```
 */
export type PromoCodeObject = PromoCode;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type PromoCodeQuery = mongoose.Query<
  any,
  PromoCodeDocument,
  PromoCodeQueries
> &
  PromoCodeQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `PromoCodeSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type PromoCodeQueries = {};

export type PromoCodeMethods = {};

export type PromoCodeStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const PromoCode = mongoose.model<PromoCodeDocument, PromoCodeModel>("PromoCode", PromoCodeSchema);
 * ```
 */
export type PromoCodeModel = mongoose.Model<
  PromoCodeDocument,
  PromoCodeQueries
> &
  PromoCodeStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new PromoCode schema instances:
 * ```
 * const PromoCodeSchema: PromoCodeSchema = new mongoose.Schema({ ... })
 * ```
 */
export type PromoCodeSchema = mongoose.Schema<
  PromoCodeDocument,
  PromoCodeModel,
  PromoCodeMethods,
  PromoCodeQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const PromoCode = mongoose.model<PromoCodeDocument, PromoCodeModel>("PromoCode", PromoCodeSchema);
 * ```
 */
export type PromoCodeDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  PromoCodeQueries
> &
  PromoCodeMethods & {
    name: string;
    description: string;
    percent: number;
    condition: {
      minPrice: number;
      firstOrder?: boolean;
      userId?: string;
    };
    startedAt: Date;
    endedAt: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of RestaurantDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RestaurantDocument.toObject()`. To avoid conflicts with model names, use the type alias `RestaurantObject`.
 * ```
 * const restaurantObject = restaurant.toObject();
 * ```
 */
export type Restaurant = {
  name: string;
  description: string;
  phone: string;
  ownerId: User["_id"] | User;
  restaurateurId: (User["_id"] | User)[];
  picture: string;
  address: {
    street: string;
    city: string;
    country: string;
    placeId: string;
  };
  deletedAt?: Date;
  types: (
    | "grocery"
    | "convenience"
    | "italian"
    | "pizza"
    | "turkish"
    | "french"
    | "american"
    | "asian"
    | "japanese"
    | "chinese"
    | "indian"
    | "burgers"
    | "fast_food"
    | "desserts"
    | "healthy"
  )[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of RestaurantDocument (type alias of `Restaurant`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Restaurant } from "../models"
 * import { RestaurantObject } from "../interfaces/mongoose.gen.ts"
 *
 * const restaurantObject: RestaurantObject = restaurant.toObject();
 * ```
 */
export type RestaurantObject = Restaurant;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type RestaurantQuery = mongoose.Query<
  any,
  RestaurantDocument,
  RestaurantQueries
> &
  RestaurantQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `RestaurantSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type RestaurantQueries = {};

export type RestaurantMethods = {};

export type RestaurantStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Restaurant = mongoose.model<RestaurantDocument, RestaurantModel>("Restaurant", RestaurantSchema);
 * ```
 */
export type RestaurantModel = mongoose.Model<
  RestaurantDocument,
  RestaurantQueries
> &
  RestaurantStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Restaurant schema instances:
 * ```
 * const RestaurantSchema: RestaurantSchema = new mongoose.Schema({ ... })
 * ```
 */
export type RestaurantSchema = mongoose.Schema<
  RestaurantDocument,
  RestaurantModel,
  RestaurantMethods,
  RestaurantQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Restaurant = mongoose.model<RestaurantDocument, RestaurantModel>("Restaurant", RestaurantSchema);
 * ```
 */
export type RestaurantDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  RestaurantQueries
> &
  RestaurantMethods & {
    name: string;
    description: string;
    phone: string;
    ownerId: UserDocument["_id"] | UserDocument;
    restaurateurId: mongoose.Types.Array<UserDocument["_id"] | UserDocument>;
    picture: string;
    address: {
      street: string;
      city: string;
      country: string;
      placeId: string;
    };
    deletedAt?: Date;
    types: mongoose.Types.Array<
      | "grocery"
      | "convenience"
      | "italian"
      | "pizza"
      | "turkish"
      | "french"
      | "american"
      | "asian"
      | "japanese"
      | "chinese"
      | "indian"
      | "burgers"
      | "fast_food"
      | "desserts"
      | "healthy"
    >;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of RoleRequestDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RoleRequestDocument.toObject()`. To avoid conflicts with model names, use the type alias `RoleRequestObject`.
 * ```
 * const rolerequestObject = rolerequest.toObject();
 * ```
 */
export type RoleRequest = {
  userId: User["_id"] | User;
  status: "accepted" | "refused" | "pending";
  createdAt: Date;
  role: "deliverer" | "restaurantOwner";
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of RoleRequestDocument (type alias of `RoleRequest`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { RoleRequest } from "../models"
 * import { RoleRequestObject } from "../interfaces/mongoose.gen.ts"
 *
 * const rolerequestObject: RoleRequestObject = rolerequest.toObject();
 * ```
 */
export type RoleRequestObject = RoleRequest;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type RoleRequestQuery = mongoose.Query<
  any,
  RoleRequestDocument,
  RoleRequestQueries
> &
  RoleRequestQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `RoleRequestSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type RoleRequestQueries = {};

export type RoleRequestMethods = {};

export type RoleRequestStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const RoleRequest = mongoose.model<RoleRequestDocument, RoleRequestModel>("RoleRequest", RoleRequestSchema);
 * ```
 */
export type RoleRequestModel = mongoose.Model<
  RoleRequestDocument,
  RoleRequestQueries
> &
  RoleRequestStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new RoleRequest schema instances:
 * ```
 * const RoleRequestSchema: RoleRequestSchema = new mongoose.Schema({ ... })
 * ```
 */
export type RoleRequestSchema = mongoose.Schema<
  RoleRequestDocument,
  RoleRequestModel,
  RoleRequestMethods,
  RoleRequestQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const RoleRequest = mongoose.model<RoleRequestDocument, RoleRequestModel>("RoleRequest", RoleRequestSchema);
 * ```
 */
export type RoleRequestDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  RoleRequestQueries
> &
  RoleRequestMethods & {
    userId: UserDocument["_id"] | UserDocument;
    status: "accepted" | "refused" | "pending";
    createdAt: Date;
    role: "deliverer" | "restaurantOwner";
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of UserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export type User = {
  firstname: string;
  lastname: string;
  password: string;
  referrerId?: User["_id"] | User;
  connected?: boolean;
  lastConnectionAt?: Date;
  createdAt: Date;
  mail: string;
  phone: string;
  address: {
    street: string;
    city: string;
    country: string;
    placeId: string;
  };
  roles: (
    | "client"
    | "deliverer"
    | "restaurantOwner"
    | "developer"
    | "saleService"
    | "techService"
  )[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of UserDocument (type alias of `User`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { User } from "../models"
 * import { UserObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userObject: UserObject = user.toObject();
 * ```
 */
export type UserObject = User;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type UserQuery = mongoose.Query<any, UserDocument, UserQueries> &
  UserQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `UserSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type UserQueries = {};

export type UserMethods = {};

export type UserStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserModel = mongoose.Model<UserDocument, UserQueries> & UserStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new User schema instances:
 * ```
 * const UserSchema: UserSchema = new mongoose.Schema({ ... })
 * ```
 */
export type UserSchema = mongoose.Schema<
  UserDocument,
  UserModel,
  UserMethods,
  UserQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  UserQueries
> &
  UserMethods & {
    firstname: string;
    lastname: string;
    password: string;
    referrerId?: UserDocument["_id"] | UserDocument;
    connected?: boolean;
    lastConnectionAt?: Date;
    createdAt: Date;
    mail: string;
    phone: string;
    address: {
      street: string;
      city: string;
      country: string;
      placeId: string;
    };
    roles: mongoose.Types.Array<
      | "client"
      | "deliverer"
      | "restaurantOwner"
      | "developer"
      | "saleService"
      | "techService"
    >;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
